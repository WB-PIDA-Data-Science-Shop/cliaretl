% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipeline_management.R
\name{update_db_variables}
\alias{update_db_variables}
\title{Update Variable Names in a Data Frame}
\usage{
update_db_variables(data, rename_map = NULL, find_var_name = NULL)
}
\arguments{
\item{data}{A data frame containing a 'variable' column (e.g., `db_variables`).}

\item{rename_map}{A named character vector (e.g., `c("new_var" = "old_var")`).
If `NULL`, no bulk renaming is applied.}

\item{find_var_name}{An optional character string. If provided, the function
will return the row index of this variable after any renames.}
}
\value{
The modified data frame if `find_var_name` is `NULL`.
  If `find_var_name` is provided, returns the numeric row index of the first
  match, or `NA` if not found.
}
\description{
This function efficiently renames multiple 'variable' entries within a
provided data frame using a named vector of `new_name = old_name` pairs.
It also allows for finding a specific variable's index for manual edits.
}
\examples{
# Example 1: Apply bulk renames
# my_data <- data.frame(variable = c("old_a", "old_b"), var_name = c("A", "B"))
# renames <- c("new_a" = "old_a")
# my_data_updated <- update_db_variables(my_data, rename_map = renames)
# print(my_data_updated)

# Example 2: Find a variable's index after renames
# db_variables_renamed <- update_db_variables(db_variables, rename_map = my_renames)
# idx <- update_db_variables(db_variables_renamed, find_var_name = "spi_std_and_methods")
# print(idx)
# if (!is.na(idx)) { print(db_variables_renamed[idx, ]) }
}

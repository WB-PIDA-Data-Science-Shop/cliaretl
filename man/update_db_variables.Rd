% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipeline_management_funs.R
\name{update_db_variables}
\alias{update_db_variables}
\title{Update Variable Names in db_variables}
\usage{
update_db_variables(
  data,
  rename_map = NULL,
  column_name = "variable",
  find_var_name = NULL
)
}
\arguments{
\item{data}{A data frame containing the target column for renaming.}

\item{rename_map}{A named character vector (e.g., `c("new_var" = "old_var")`).
If `NULL`, no bulk renaming is applied.}

\item{column_name}{A character string specifying which column to apply the
renaming to. Defaults to "variable" for backward compatibility.}

\item{find_var_name}{An optional character string. If provided, the function
will return the row index of this value in the specified column after any renames.}
}
\value{
The modified data frame if `find_var_name` is `NULL`.
  If `find_var_name` is provided, returns the numeric row index of the first
  match, or `NA` if not found.
}
\description{
This function efficiently renames multiple entries within a specified column
of a provided data frame using a named vector of `new_name = old_name` pairs.
It also allows for finding a specific variable's index for manual edits.
}
\examples{
\dontrun{
# Example 1: Apply bulk renames to 'var_name' column
rename_map <- c("New Variable A" = "Old Variable A")
data_updated <- update_db_variables(data, rename_map = rename_map, column_name = "var_name")

# Example 2: Apply bulk renames to 'description' column
desc_renames <- c("Updated description" = "Old description")
data_updated <- update_db_variables(data, rename_map = desc_renames, column_name = "description")
}

}
